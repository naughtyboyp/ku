7-7 整数分解为若干项之和 (20 分)
将一个正整数N分解成几个正整数相加，可以有多种分解方法，例如7=6+1，7=5+2，7=5+1+1，…。编程求出正整数N的所有整数分解式子。

输入格式：
每个输入包含一个测试用例，即正整数N (0<N≤30)。

输出格式：
按递增顺序输出N的所有整数分解式子。递增顺序是指：对于两个分解序列N 
1
​
 ={n 
1
​
 ,n 
2
​
 ,⋯}和N 
2
​
 ={m 
1
​
 ,m 
2
​
 ,⋯}，若存在i使得n 
1
​
 =m 
1
​
 ,⋯,n 
i
​
 =m 
i
​
 ，但是n 
i+1
​
 <m 
i+1
​
 ,则N 
1
​
 序列必定在N 
2
​
 序列之前输出。每个式子由小到大相加，式子间用分号隔开，且每输出4个式子后换行。

输入样例：
7
结尾无空行
输出样例：
7=1+1+1+1+1+1+1;7=1+1+1+1+1+2;7=1+1+1+1+3;7=1+1+1+2+2
7=1+1+1+4;7=1+1+2+3;7=1+1+5;7=1+2+2+2
7=1+2+4;7=1+3+3;7=1+6;7=2+2+3
7=2+5;7=3+4;7=7
结尾无空行



#include<stdio.h>
#include<string.h>
#include<math.h>
int n = 0;
int cou = 0;

int a[45];

int dfs(int num, int sum)//num记录当前位数， sum表示和
{
    if(sum == n)//终止条件
    {
        cou++;
        cou%=4;
        int i = 0;
        printf("%d=", n);
        for(i = 1; i< num; i++)
        {
            if(i == 1)
            {
                printf("%d", a[i]);
            }
            else
            {
                printf("+%d", a[i]);
            }
        }
        if(cou == 0)
        {
            printf("\n");
        }
        else if(num == 2)
        {
            ;
        }
        else
        {
            printf(";");
        }
    }
    else
    {
        int i = 0;
        for(i = 1; i<=n; i++)//DFS探索每种情况
        {
            if(sum + i <= n && a[num-1] <=i)//DFS的探索条件，1.要求数字是递增的 2.和为还不够
            {
                a[num] = i;
                dfs(num+1, sum+i);
            }
        }
    }
}
int main()
{
    scanf("%d", &n);
    dfs(1,0);
}
