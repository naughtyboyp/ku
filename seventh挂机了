如果能做的都做完挂机了就来做这道题吧！



给你n（n<=1000）个数a[]，位于一个数轴上，我们每次可以选择向左或向右移动。



a[i]表示我们要打开第i号箱子需要先打开多少个箱子。



一开始我们在起点1，没有打开过箱子，问你至少要转弯多少次，才可以打开完所有的箱子（数据保证一定有解）

Input
有多组数据，需要用EOF读入，第一行是一个n，接下来一行有n个数ai（ai<n）

Output
输出一个整数，表示为了打开n个箱子，需要转弯的次数

SampleInput 1
3
0 2 0
5
4 2 3 0 1
SampleOutput 1
1
3
SampleInput 2
5
4 2 3 0 1
SampleOutput 2
3
SampleInput 3
7
0 3 1 0 5 2 6
SampleOutput 3
2

提示

第三个样例开箱子顺序为: 1->3->4->6->2->5->7.


//本题关键在于找出跳出循环条件

#include<stdio.h>
#include<math.h>
int main()
{
    int n = 0;
    while(~scanf("%d", &n))
    {
        int i = 0;
        int a[1005] = {0};
        int b[1005] = {0};
        int max = 0;
        for(i = 0; i<n; i++)
        {
            scanf("%d", &a[i]);
        }
        int num = 0;//箱子数
        int turn = 0;//转弯
        while(1)
        {
            for(i = 0; i<n; i++)
            {
                if(a[i] <= num && b[i] == 0)
                {
                    b[i] = 1;
                    num++;
                }
            }
            for(i = 0; i<n; i++)
            {
                if(b[i] != 1)
                {
                    break;
                }
            }
            if(i == n)
            {
                break;
            }
            turn++;
            for(i = n-1; i>=0; i--)
            {
                if(a[i] <= num && b[i] == 0)
                {
                    b[i] = 1;
                    num++;
                }
            }
            for(i = 0; i<n; i++)
            {
                if(b[i] != 1)
                {
                    break;
                }
            }
            if(i == n)
            {
                break;
            }
            turn++;
        }
        printf("%d\n", turn);
    }

    return 0;
}
