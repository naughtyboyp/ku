蝈蝈不是(出题)人
TimeLimit:1000MS  MemoryLimit:64MB
64-bit integer IO format:%lld
已解决 | 点击收藏
Problem Description
因为蝈蝈不是出题人，所以这题肯定是卢宝出的，卢宝带恶人。



给你一张n*m的地图，每个位置可能是空地，可能是有不同价值宝藏的草地，可能是无法通过的障碍物，也可能是有会抢夺你全部财宝的海盗的荒地。入口在地图的左上角，出口在地图的右下角。蝈蝈初始财富值为0，且蝈蝈每次移动只能向下或向右。蝈蝈要从入口进去，从出口出来，并且要带着最大价值的宝藏。蝈蝈想知道他最多能带着多大价值的宝藏出来，你能帮蝈蝈解答这个问题吗？



保证地图的左上角和右下角一定为空地

Input
第一行两个整数n和m，代表n*m的地图（2≤n，m≤15）

第2到n+1行，每行m个字符，其中：

“.”表示空地，没有宝藏也没有海盗；

“#”表示为无法通过的障碍物

“A”表示价值为100的宝藏

“B”表示价值为50的宝藏

“C”表示价值为20的宝藏

“D”表示价值为10的宝藏

“%”表示海盗，会抢走你当前身上所有的宝藏



保证只包含上述字符

除了障碍物都能通过

Output
输出一个整数，表示蝈蝈能带出的宝藏的最大价值（如果蝈蝈无法走到出口，则输出-1）

SampleInput
2 2
.#
C.

2 2
.#
#.

3 3
.A#
A%D
#D.
SampleOutput
20

-1

10



#include<stdio.h>
int n = 0;
int m = 0;
char maze[20][20];//建立迷宫
int flag = 0;//标记是否到达终点
int dx[2] = {0,1};//方向数组，x表示行，y表示列，0代表向右，1代表向下
int dy[2] = {1,0};
int num[9999];//存放每种能到达终点的 money
int k = 0;//你懂得
void dfs(int x, int y, int endx, int endy, int money)//x,y代表当前位置，endx,endy 代表终点位置，money代表每个位置拥有的钱钱
{
    if(x == endx && y == endy)//到达终点
    {
        flag = 1;
        num[k++] = money;//把能到达的钱钱算进去
    }
    else
    {
        if(maze[x][y] == 'A')//遇到宝藏 钱钱++
        {
            money+=100;
        }
        if(maze[x][y] == 'B')
        {
            money+=50;
        }
        if(maze[x][y] == 'C')
        {
            money+=20;
        }
        if(maze[x][y] == 'D')
        {
            money+=10;
        }
        if(maze[x][y] == '%')
        {
            money = 0;
        }
        int i = 0;
        for(i = 0; i<2; i++)//方向数组，i= 0时 探的是右边，i = 1时探下面  每次探两个方向
        {
            int tx = x + dx[i];
            int ty = y + dy[i];
            if(maze[tx][ty] != '#' && tx < n && ty <m)//数组不越界或者 不是障碍物 就勇敢牛牛冲冲冲
            {
                dfs(tx, ty, endx, endy, money);
            }
        }
    }
}
int main()
{
    scanf("%d%d", &n, &m);
    getchar();
    int i = 0;
    int j = 0;
    for(i = 0; i<n; i++)
    {
        scanf("%s", maze[i]);
    }
    dfs(0,0,n-1,m-1, 0);//从0,0开始探索，终点坐标(n-1,m-1),money一开始是0
    if(flag == 0)//如果不能到达终点就-1
    {
        printf("-1");
    }
    else
    {
        int i = 0;
        int max = 0;
        for(i = 0; i<k; i++)//找出所有出口中的最大值
        {
            if(max < num[i])
            {
                max = num[i];
            }
        }
        printf("%d", max);
    }
    return 0;
}
