V_Dragon有n栈电灯泡，编号为1-n，每个灯泡都有一个开关。那么问题来了

所有灯泡初始时为不亮的

V_Dragon分别进行三次操作

每次操作他都选一个质数x，将编号为x和x的整数倍的灯泡的开关都拨动一下（如果灯为亮，那么拨动以后灯为不亮,如果灯不亮，拨动以后变为亮）

求最后亮着的灯的数量

Input
输入T表示T组测试数据（1<=T<=100）

接下来T组测试数据

每组第一行一个n表示灯泡个数（1<=n<=10^9）

第二行三个数a,b,c表示V_Dragon每次选择的数（1<=a,b,c<=10^6）（a,b,c全为质数且a,b,c两两互不相等）

不懂格式的同学可以参考以下格式：



Output
数组最后亮着的灯的个数
容斥原理 
#include<stdio.h>
int main()
{
    int t = 0;
    scanf("%d", &t);
    while(t--)
    {
        int n = 0;
        int a = 0;
        int b = 0;
        int c = 0;
        scanf("%d%d%d%d", &n, &a, &b, &c);
        printf("%d\n", n/a+ n/b+ n/c- 2*(n/a/b+ n/a/c+ n/b/c)+ 4*(n/a/b/c));   //运用维恩图
    }
    return 0;
}
