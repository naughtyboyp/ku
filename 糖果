已知一些孩子和一些糖果，每个孩子有需求因子g，每个糖果有大小s，当某个糖果的大小s>=某个孩子的需求因子g时，代表该糖果可以满足该孩子，求使用这些糖果，最多能满足多少孩子（注意，某个孩子最多只能用1个糖果满足）

Input
多组数据

每组数据第一行两个整数n，m，分别表示孩子的数量和糖果的数量（1≤n，m≤100000）

接下来一行n个整数ai，表示每个孩子的需求因子（0≤ai≤1000000）

然后再一行m个整数bi，表示每个糖果的大小（0≤bi≤1000000）

Output
每组数据输出一行，表示最多能满足的孩子的数量


#include<stdio.h>
long int a[100005];//记录小屁孩
long int b[100005];//记录糖果
void shellSort(long int* a,int len)
{
    int i = 0;
    int j = 0;
    int k = 0;
    int tmp = 0;
    int gap = 0;
    for(gap = len/2; gap>0; gap/=2)
    {
        for(i = 0; i<gap; i++)
        {
            for(j = gap+i; j<len; j+=gap)
            {
                tmp = a[j];
                k = j - gap;
                while(k>=0 && tmp < a[k])
                {
                    a[k+gap] = a[k];
                    k-=gap;
                }
                a[k+gap] = tmp;
            }
        }
    }
}
int main()
{
    int n = 0;
    int m = 0;
    while(~scanf("%d%d", &n, &m))
    {
        int i = 0;
        for(i = 0; i<n; i++)
        {
            scanf("%ld", &a[i]);
        }
        for(i = 0; i<m; i++)
        {
            scanf("%ld", &b[i]);
        }
        shellSort(a,n);//希尔排序
        shellSort(b,m);
        long int child = 0;//小屁孩
        long int co = 0;//糖果
        while(child < n && co < m)
        {
            if(a[child] <= b[co])
            {
                child++;
            }
            co++;
        }
        printf("%ld\n", child);
    }
    return 0;
}
