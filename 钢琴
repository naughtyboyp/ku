//先排序
//通过求最大公约数  来求解  欧几里得算法  辗转相除

多组数据，首先是一个整数t(t<=100)表示数据组数

每组数据是三个正整数a,b,c(27<=a,b,c<=4186)，表示三个音的频率，单位赫兹。

Output
对于每组数据，如果是大调和弦即频率比例为4:5:6，则输出"major"，如果是小调和弦，则输出"minor"，如果都不是，则输出"noise"，注意不需要输出双引号，为了避免拼写问题，建议复制。

SampleInput
3
264 330 396
220 264 330
264 297 330
SampleOutput
major
minor
noise

提示：
264:330:396=4:5:6 为大调和弦
220:264:330=10:12:15 为小调和弦
264:297:330=8:9:10 既不是大调和弦也不是小调和弦

#include<stdio.h>
#include<string.h>
void shellSort(int* a, int len)
{
    int i = 0;
    int j = 0;
    int k = 0;
    int gap = 0;
    int tmp = 0;
    for(gap = len/2; gap>0; gap/=2)
    {
        for(i = 0; i< gap; i++)
        {
            for(j = gap+i; j<len; j++)
            {
                tmp = a[j];
                k = j - gap;
                while(k >=0 && tmp < a[k])
                {
                    a[k+gap] = a[k];
                    k-=gap;
                }
                a[k+gap] = tmp;

            }
        }
    }
}
int main()
{
    int t = 0;
    scanf("%d", &t);
    while(t--)
    {
        int a[3] = {0};
        scanf("%d%d%d", &a[0], &a[1], &a[2]);
        shellSort(a, 3);
        int b = a[0];
        int i = 0;
        for(i = 1; i <3; i++)
        {
            int c = a[i];
            if(c < b)
            {
                int d = c;
                c = b;
                b = d;
            }
            int m = 0;
            while(c % b)
            {
                m = c % b;
                c = b;
                b = m;
            }
        }
        if(a[0]/b == 4 && a[1] / b == 5 && a[2] / b == 6)
        {
            printf("major\n");
        }
        else if(a[0]/b == 10 && a[1] / b == 12 && a[2] / b == 15)
        {
            printf("minor\n");
        }
        else
        {
            printf("noise\n");
        }
    }
    return 0;
}
